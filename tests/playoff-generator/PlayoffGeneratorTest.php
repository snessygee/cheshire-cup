<?php

/**
 * Test class for PlayoffGenerator.
 * Generated by PHPUnit on 2012-02-01 at 11:15:15.
 * @group playoff
 */
class PlayoffGeneratorTest extends PHPUnit_Framework_TestCase {

    /** @var array */
    protected $teams;
    /** @var PlayoffGenerator */
    protected $object;

    protected function setUp() {
        $this->teams = array('A', 'B', 'C', 'D');
        $this->object = PlayoffGenerator::create($this->teams);
    }    
    
    public function testCreate() {
        parent::assertInstanceOf('PlayoffGenerator', $this->object);
        // invalid
        $this->invalid_arguments(null);// argument must be array
        $this->invalid_arguments(array(1, 2, 3));// count must be power of two  
        $this->invalid_arguments($this->get_teams_with_unallowed_count()); // max count is PLAYOFF_MAX_TEAMS
    }

    public function testGenerate_round() {
        $matches = $this->object->generate_round();
        parent::assertEquals(count($matches), count($this->teams) / 2);
        foreach ($matches as $match) {
            $this->team_testing($match['home']);
            $this->team_testing($match['away']);
        }
    }
    
    public function testGet_teams() {
        parent::assertEquals(count($this->object->get_teams()), count($this->teams));
        foreach ($this->object->get_teams() as $team) {
            $this->team_testing($team);            
        }
    }
    
    private function team_testing($team) {
        parent::assertInstanceOf('PlayoffDuelParticipant', $team);
        parent::assertTrue(in_array($team->team, $this->teams));
    }
    
    private function invalid_arguments($teams) {
        try {
            PlayoffGenerator::create($teams);
            parent::fail('This test did not fail as expected');
        } catch (PlayoffException $e) {
            parent::assertEquals($e->getCode(), PlayoffException::EXC1);
        }
    }

    private function get_teams_with_unallowed_count() {
        $teams = array();
        for ($i = 1; $i < PLAYOFF_MAX_TEAMS * 2; $i++) {
            $teams[] = 'Team n.' . $i;
        }
        return $teams;
    }
    
}

?>
