<?php

/**
 * Test class for SeasonGenerator.
 * Generated by PHPUnit on 2012-02-01 at 14:46:00.
 * @group season
 */
class SeasonGeneratorTest extends PHPUnit_Framework_TestCase {

    /** @var SeasonGenerator */
    protected $object;

    protected function setUp() {
        $this->object = SeasonGenerator::create(array('A', 'B', 'C', 'D', 'E', 'F', 'G'), 1);
    }

    public function testCreate() {
        parent::assertInstanceOf('SeasonGenerator', $this->object);
        // invalid
        $this->invalid_arguments(null, 2); // teams must be array
        $this->invalid_arguments(array(1, 2, 3, null), 2); // teams cannot contains null
        $this->invalid_arguments(array(1), 2); // team count >= 2 and <= SEASON_MAX_TEAMS
        $this->invalid_arguments(array(1, 2, 3), new Exception()); // period_count must integer
        $this->invalid_arguments(array(1, 2, 3), SEASON_MIN_PERIODS - 1); // period_count must be >= SEASON_MIN_PERIODS
        $this->invalid_arguments(array(1, 2, 3), SEASON_MAX_PERIODS + 1); // period_count must be <= SEASON_MAX_PERIODS
    }

    public function testGenerate_AND_shuffleTeams() {
        $this->object->generate();
        $schedule_a = clone $this->object;
        $schedule_a = $schedule_a->getSchedule()->getIterator()->getArrayCopy();
        $this->object->shuffleTeams();
        $this->object->generate();
        $schedule_b = $this->object->getSchedule()->getIterator()->getArrayCopy();

        $difference = 0;
        for ($round = 1; $round <= count($schedule_a); $round++) {
            $round_a = $schedule_a[$round]->getIterator()->getArrayCopy();
            $round_b = $schedule_b[$round]->getIterator()->getArrayCopy();
            for ($match = 0; $match < count($round_a); $match++) {
                $home_a = $round_a[$match]->home;
                $home_b = $round_b[$match]->home;
                $away_a = $round_a[$match]->away;
                $away_b = $round_b[$match]->away;
                if ($home_a != $home_b || $away_a != $away_b) {
                    $difference++;
                }
            }
        }
        parent::assertTrue($difference > 0);
        //echo "\n*******************\n{$difference}\n************\n";
    }

    public function testGetSchedule() {
        try {
            $this->object->getSchedule();
            parent::fail('This test did not fail as expected');
        } catch (SeasonException $e) {
            parent::assertEquals($e->getCode(), SeasonException::EXC2);
        }
        $this->object->generate();
        parent::assertInstanceOf('SeasonSchedule', $this->object->getSchedule());
    }

    private function invalid_arguments($teams, $period_count) {
        try {
            SeasonGenerator::create($teams, $period_count);
            parent::fail('This test did not fail as expected');
        } catch (SeasonException $e) {
            parent::assertEquals($e->getCode(), SeasonException::EXC1);
        }
    }

}

?>
